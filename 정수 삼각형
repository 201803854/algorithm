def solution(triangle):
    # 삼각형의 끝에서부터 시작하여 위로 올라가면서 각 위치에서 가능한 최대 합을 계산합니다.
    # range(start, end, step) 함수는 start부터 end까지 step만큼 증가하는 숫자 리스트를 반환합니다.
    # 여기서는 삼각형의 끝에서부터 시작하여 위로 올라가므로 start는 len(triangle)-2, end는 -1(0번 인덱스까지 포함하기 위함), step은 -1입니다.
    for i in range(len(triangle)-2, -1, -1):  
        # 각 줄의 모든 위치에 대해 반복합니다.
        for j in range(len(triangle[i])):  
            # 현재 위치에서 가능한 두 경로(바로 아래와 오른쪽 아래) 중에서 더 큰 값을 현재 위치의 값에 더합니다.
            # 이렇게 하면 현재 위치에서 가능한 최대 합이 계산됩니다.
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])  
    # 모든 위치에서 가능한 최대 합을 계산한 후에는 삼각형의 꼭대기 위치에 전체 경로에서 얻을 수 있는 최대 합이 저장되어 있습니다.
    # 따라서 이 값을 반환하면 됩니다.
    return triangle[0][0]  