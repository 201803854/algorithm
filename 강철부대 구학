from collections import defaultdict, deque

def solution(n, roads, sources, destination):
    answer = [-1] * len(sources)  # 결과를 저장할 리스트 초기화
    bridge = defaultdict(list)  # 인접 리스트 생성
    for road in roads:
        bridge[road[0]].append(road[1])  # 도로 정보를 인접 리스트에 추가
        bridge[road[1]].append(road[0])  # 양방향 도로이므로 반대 방향도 추가
    
    queue = deque([(destination, 0)])  # 출발 노드와 이동 거리를 큐에 저장
    visited = set([destination])  # 방문한 노드를 저장하는 집합
    
    while queue:
        current, move = queue.popleft()  # 큐에서 현재 노드와 이동 거리를 가져옴
        
        if current in sources:  # 현재 노드가 sources 리스트에 있는 경우
            answer[sources.index(current)] = move  # 해당 인덱스에 이동 거리를 저장
        
        for next_node in bridge[current]:  # 현재 노드와 연결된 인접 노드들을 탐색
            if next_node not in visited:  # 방문하지 않은 노드인 경우
                visited.add(next_node)  # 방문한 노드로 표시
                queue.append((next_node, move + 1))  # 큐에 인접 노드와 이동 거리를 저장
    
    return answer
