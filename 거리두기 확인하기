from itertools import combinations

def solution(places):
    answer = []  # 각 장소에서의 거리두기 준수 여부를 저장할 리스트

    # 두 위치 간의 거리를 체크하는 함수
    def check(place,x,y) :
        if x[0] == y[0] :  # 같은 행에 있는 경우
            if place[x[0]][(x[1]+y[1]) // 2] == 'O' :  # 중간에 파티션이 없는 경우
                return 0
        elif x[1] == y[1] :  # 같은 열에 있는 경우
            if place[(x[0]+y[0]) // 2][x[1]] == 'O' :  # 중간에 파티션이 없는 경우
                return 0
        else :  # 대각선에 위치하는 경우
            for i in range(min(x[0],y[0]),max(x[0],y[0])+1) :
                for j in range(min(x[1],y[1]),max(x[1],y[1])+1) :
                    if place[i][j] == 'O' :  # 대각선 사이에 파티션이 없는 경우
                        return 0
        return 1  # 위의 모든 조건을 만족하지 않는 경우, 즉 파티션이 있는 경우

    for place in places :  # 각 장소에 대해
        location = []  # 사람('P')이 있는 위치를 저장할 리스트
        for x,desk in enumerate(place) :
            for y,person in enumerate(desk) :
                if person == 'P' :  # 사람이 있는 경우
                    location.append([x,y])  # 위치를 저장
        distance = list(combinations(location,2))  # 사람과 사람 간의 조합을 생성
        if len(distance) == 0 :  # 사람이 한 명도 없는 경우
            answer.append(1)  # 거리두기를 지키고 있다고 판단
            continue
        else :
            flag = 1  # 거리두기를 지키고 있는지 표시하는 플래그
            for i in range(len(distance)) :
                if abs(distance[i][0][0] - distance[i][1][0]) + abs(distance[i][0][1] - distance[i][1][1]) == 1 :
                    answer.append(0)
                    flag = 0
                    break
                if abs(distance[i][0][0] - distance[i][1][0]) + abs(distance[i][0][1] - distance[i][1][1]) == 2 :
                    if check(place,distance[i][0],distance[i][1]) == 0 :
                        answer.append(0)
                        flag = 0
                        break
            if flag :  # 모든 조합을 확인했는데 거리두기를 지키지 않는 경우가 없는 경우
                answer.append(1)  # 거리두기를 지키고 있다고 판단
    return answer  # 결과를 반환