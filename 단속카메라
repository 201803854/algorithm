def solution(routes):
    answer = 1  # 필요한 카메라의 수를 저장할 변수를 초기화합니다.
    routes.sort(key = lambda x : x[0])  # routes 리스트를 첫 번째 원소 기준으로 오름차순 정렬합니다.
    print(routes)  # 정렬된 routes 리스트를 출력합니다.
    check = routes[0][1]  # 첫 번째 route의 끝나는 지점을 저장합니다.

    for route in routes :  # routes 리스트를 순회합니다.
        print(check)  # 현재 체크 중인 지점을 출력합니다.

        if route[1] < check :  # 만약 route의 끝나는 지점이 현재 체크 중인 지점보다 앞에 있다면,
            check = route[1]  # 체크 지점을 route의 끝나는 지점으로 변경합니다.

        if route[0] > check :  # 만약 route의 시작 지점이 현재 체크 중인 지점보다 뒤에 있다면,
            check = route[1]  # 체크 지점을 route의 끝나는 지점으로 변경하고,
            answer += 1  # 필요한 카메라 수를 1 증가시킵니다.

    return answer  # 최종적으로 필요한 카메라의 수를 반환합니다.
