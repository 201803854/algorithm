def solution(friends, gifts):  # friends는 친구들의 이름 리스트, gifts는 선물을 주고받은 정보 리스트입니다.
    answer = 0  # 가장 많은 선물을 받은 횟수를 저장할 변수를 초기화합니다.

    present_count = []  # 선물 주고받은 정보를 분리하여 저장할 리스트를 생성합니다.
    count = {}  # 각 친구가 다른 친구에게 선물을 준 횟수를 저장할 딕셔너리를 생성합니다.
    final = {name :0 for name in friends}  # 각 친구가 선물을 받은 횟수를 저장할 딕셔너리를 생성합니다.
    dic = { name : 0 for name in friends }  # 각 친구가 선물을 준 횟수와 받은 횟수의 차이를 저장할 딕셔너리를 생성합니다.

    for gift in gifts :  # 각 선물 정보에 대해
        present_count.append(gift.split())  # 정보를 분리하여 present_count에 추가합니다.

    for name in friends :  # 각 친구에 대해
        count[name] = {opp : 0 for opp in friends}  # 각 친구가 다른 친구에게 선물을 준 횟수를 저장할 딕셔너리를 생성합니다.

    for num in present_count :  # 각 선물 정보에 대해
        try : 
            count[num[0]][num[1]] += 1  # 선물을 준 친구의 선물 준 횟수를 1 증가시킵니다.
            dic[num[0]] += 1  # 선물을 준 친구의 선물 준 횟수를 1 증가시킵니다.
            dic[num[1]] -= 1  # 선물을 받은 친구의 선물 받은 횟수를 1 감소시킵니다.
        except KeyError:  # 해당 친구가 리스트에 없는 경우
            print(":")  # ":"를 출력합니다.

    for num ,name in enumerate(friends) :  # 각 친구에 대해
        for opp in friends[num+1:] :  # 해당 친구 이후의 친구들에 대해
            # 선물을 주고 받은 횟수와 선물을 준 횟수와 받은 횟수의 차이를 비교하여 선물을 가장 많이 받은 친구를 결정합니다.
            if count[name][opp] > count[opp][name] :
                final[name] += 1
            elif count[name][opp] == count[opp][name] and dic[name] > dic[opp] :
                final[name] += 1
            elif count[name][opp] == count[opp][name] and dic[name] < dic[opp] :
                final[opp] += 1
            elif count[name][opp] < count[opp][name] :
                final[opp] += 1

    answer = max(final.values())  # 가장 많은 선물을 받은 횟수를 구합니다.

    return answer  # 가장 많은 선물을 받은 횟수를 반환합니다.