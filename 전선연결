def dfs(graph, node, parent, count):
    for i in graph[node]: # 노드 node와 연결된 노드들을 순회합니다.
        if i == parent: # 순회 중인 노드가 부모 노드라면 건너뜁니다.
            continue
        count[node] += dfs(graph, i, node, count) # 순회 중인 노드를 시작으로 DFS를 재귀적으로 수행하고, 노드 node에 속한 하위 노드 수를 추가합니다.
    return count[node] # 노드 node에 속한 노드의 총 개수를 반환합니다.

def solution(n, wires):
    graph = [[] for _ in range(n+1)] # 그래프를 초기화합니다. 각 인덱스는 노드 번호를 의미하며, 각 노드 번호에 연결된 노드들의 리스트를 값으로 합니다.
    count = [1] * (n+1) # 각 노드에 속한 노드의 개수를 저장하는 리스트를 초기화합니다. 자기 자신을 포함하므로 모든 값을 1로 설정합니다.
    for a, b in wires: # 주어진 연결 정보를 순회합니다.
        graph[a].append(b) # 노드 a와 b가 연결되어 있으므로, 노드 a에 연결된 노드 리스트에 b를 추가합니다.
        graph[b].append(a) # 마찬가지로 노드 b에 연결된 노드 리스트에 a를 추가합니다.
    dfs(graph, 1, 0, count) # 노드 1을 시작으로 DFS를 수행하여 각 노드에 속한 노드의 개수를 계산합니다.
    answer = min(abs(count[i] - (n - count[i])) for i in range(2, n+1)) # 각 노드를 기준으로 그래프를 두 부분으로 나누었을 때, 두 부분의 노드 개수 차이를 최소화하는 값을 찾습니다.
    return answer # 계산된 최소 차이 값을 반환합니다.
