def solution(topping):
    from collections import defaultdict   # defaultdict 라이브러리를 불러옵니다.

    n = len(topping)  # 롤케이크에 토핑의 총 개수를 구합니다.
    left_counts = [0] * (n+1)  # 왼쪽에서 오른쪽으로 롤케이크를 자르면서 토핑의 종류 수를 저장할 리스트를 초기화합니다.
    right_counts = [0] * (n+1)  # 오른쪽에서 왼쪽으로 롤케이크를 자르면서 토핑의 종류 수를 저장할 리스트를 초기화합니다.

    topping_dict = defaultdict(int)  # 토핑의 번호를 키로, 해당 토핑의 개수를 값으로 하는 딕셔너리를 초기화합니다.
    for i in range(n):  # 왼쪽에서 오른쪽으로 롤케이크를 스캔합니다.
        topping_dict[topping[i]] += 1  # 롤케이크의 i번째 위치에 있는 토핑의 개수를 1 증가시킵니다.
        left_counts[i+1] = len(topping_dict)  # 롤케이크를 왼쪽에서 i+1번째 위치에서 자르면 왼쪽 조각에 있는 토핑의 종류 수를 저장합니다.

    topping_dict.clear()  # 딕셔너리를 초기화합니다.
    for i in range(n-1, -1, -1):  # 오른쪽에서 왼쪽으로 롤케이크를 스캔합니다.
        topping_dict[topping[i]] += 1  # 롤케이크의 i번째 위치에 있는 토핑의 개수를 1 증가시킵니다.
        right_counts[i] = len(topping_dict)  # 롤케이크를 오른쪽에서 i번째 위치에서 자르면 오른쪽 조각에 있는 토핑의 종류 수를 저장합니다.

    answer = 0  # 롤케이크를 공평하게 자를 수 있는 위치의 개수를 저장할 변수를 초기화합니다.
    for i in range(1, n):  # 롤케이크를 왼쪽에서 1번째 위치부터 오른쪽에서 1번째 위치까지 자릅니다.
        if left_counts[i] == right_counts[i]:  # 롤케이크를 i번째 위치에서 자르면 양쪽 조각에 있는 토핑의 종류 수가 같으면
            answer += 1  # 롤케이크를 공평하게 자를 수 있는 위치의 개수를 1 증가시킵니다.

    return answer  # 롤케이크를 공평하게 자를 수 있는 위치의 개수를 반환합니다.
