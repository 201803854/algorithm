from collections import defaultdict, deque

def solution(n, edge):
    # 인접한 노드들을 저장할 defaultdict를 생성합니다.
    near = defaultdict(list)
    
    # 주어진 edge 리스트를 순회하며 인접한 노드들을 저장합니다.
    for line in edge:
        near[line[0]].append(line[1])
        near[line[1]].append(line[0])
    
    # 방문한 노드들을 저장할 집합(중복 제거를 위해)을 생성합니다.
    visited = set()
    
    # BFS 탐색을 위한 큐를 생성합니다.
    queue = deque()
    
    # 출발 노드인 1을 방문 처리하고 큐에 추가합니다.
    visited.add(1)
    queue.append(1)
    
    # 각 노드까지의 거리를 저장할 리스트를 생성하고 초기화합니다.
    distance = [0] * n
    
    # 최대 거리를 추적하기 위한 변수를 초기화합니다.
    max_distance = 0
    
    while queue:
        # 큐에서 노드를 하나씩 꺼내어 처리합니다.
        x = queue.popleft()
        
        # 현재 노드의 인접한 노드들을 순회합니다.
        for i in near[x]:
            # 방문하지 않은 노드인 경우에만 처리합니다.
            if i not in visited:
                # 방문 처리하고 거리를 갱신합니다.
                visited.add(i)
                distance[i-1] = distance[x-1] + 1
                
                # 큐에 인접한 노드를 추가합니다.
                queue.append(i)
                
                # 최대 거리를 업데이트합니다.
                max_distance = max(max_distance, distance[i-1])
    
    # 최대 거리를 가진 노드의 개수를 세고 반환합니다.
    answer = distance.count(max_distance)
    return answer
