import heapq

def solution(operations):
    answer = []
    maxheap = []  # 최대 힙
    minheap = []  # 최소 힙
    count = 0     # 현재 큐에 남아있는 원소의 개수

    heapq.heapify(maxheap)  # 최대 힙 초기화
    heapq.heapify(minheap)  # 최소 힙 초기화

    for order in operations:
        operation = order.split()  # 공백을 기준으로 명령어를 분리

        # 'I' 명령어의 경우
        if operation[0] == 'I':
            count += 1  # 원소 개수 증가
            # 각 힙에 원소 추가. 최대 힙의 경우 원소의 부호를 바꿔서 추가
            heapq.heappush(minheap, int(operation[1]))
            heapq.heappush(maxheap, -int(operation[1]))

        # 'D' 명령어의 경우
        if operation[0] == 'D':
            if count > 0:  # 원소가 하나 이상 있을 경우
                count -= 1  # 원소 개수 감소
            if minheap and operation[1] == '-1':  # 최소값 삭제 명령어
                x = heapq.heappop(minheap)  # 최소 힙에서 원소 삭제
                maxheap.remove(-x)  # 최대 힙에서도 해당 원소 삭제
                heapq.heapify(maxheap)  # 힙 구조 재정렬
            if maxheap and operation[1] == '1':  # 최대값 삭제 명령어
                x = heapq.heappop(maxheap)  # 최대 힙에서 원소 삭제
                minheap.remove(-x)  # 최소 힙에서도 해당 원소 삭제
                heapq.heapify(minheap)  # 힙 구조 재정렬

    # 원소가 하나만 남아있을 경우
    if count == 1:
        x = heapq.heappop(minheap)  # 남아있는 원소 추출
        return [x, x]  # 최대값, 최소값 모두 해당 원소
    # 원소가 없을 경우
    elif count <= 0:
        return [0, 0]  # 최대값, 최소값 모두 0
    else:  # 원소가 두 개 이상 남아있을 경우
        # 최대값과 최소값을 각각의 힙에서 추출하여 반환
        return [-heapq.heappop(maxheap), heapq.heappop(minheap)]
